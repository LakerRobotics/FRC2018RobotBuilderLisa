// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5053.RobotBuilderLisa;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainrightDrive1PWM;
    public static SpeedController driveTrainrightDrive2PWM;
    public static SpeedController driveTrainleftDrive1PWM;
    public static SpeedController driveTrainleftDrive2PWM;
    public static RobotDrive driveTrainRobotDrive41;
    public static Encoder driveTrainleftDriveEncoder;
    public static Encoder driveTrainrightDriveEncoder;
    public static WPI_TalonSRX elevatorTalonSRX1;
    public static Encoder elevatorENCODER_IS_WIRED_TO_TALON_NEED_TO_MANUALLY_WRITE_CODE;
    public static DigitalInput elevatorelevatorLimitHighDIO;
    public static DigitalInput elevatorelevatorLimitLowDIO;
    public static DoubleSolenoid intakeIntakeSolenoid;
    public static SpeedController intakeintakeLeftPWM;
    public static SpeedController intakeintakeRightPWM;
    public static SpeedController intakeRoller;
    public static Solenoid intakeGripper;
    public static DoubleSolenoid catapultleftSolenoid;
    public static DoubleSolenoid catapultrightSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainrightDrive1PWM = new Talon(3);
        LiveWindow.addActuator("DriveTrain", "rightDrive1PWM ", (Talon) driveTrainrightDrive1PWM);
        driveTrainrightDrive1PWM.setInverted(false);
        driveTrainrightDrive2PWM = new Talon(4);
        LiveWindow.addActuator("DriveTrain", "rightDrive2PWM ", (Talon) driveTrainrightDrive2PWM);
        driveTrainrightDrive2PWM.setInverted(false);
        driveTrainleftDrive1PWM = new Spark(7);
        LiveWindow.addActuator("DriveTrain", "leftDrive1PWM ", (Spark) driveTrainleftDrive1PWM);
        driveTrainleftDrive1PWM.setInverted(false);
        driveTrainleftDrive2PWM = new Spark(8);
        LiveWindow.addActuator("DriveTrain", "leftDrive2PWM ", (Spark) driveTrainleftDrive2PWM);
        driveTrainleftDrive2PWM.setInverted(false);
        driveTrainRobotDrive41 = new RobotDrive(driveTrainleftDrive1PWM, driveTrainleftDrive2PWM,
              driveTrainrightDrive1PWM, driveTrainrightDrive2PWM);
        
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);

        driveTrainleftDriveEncoder = new Encoder(1, 0, true, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "leftDriveEncoder", driveTrainleftDriveEncoder);
        driveTrainleftDriveEncoder.setDistancePerPulse(1.0);
        driveTrainleftDriveEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainrightDriveEncoder = new Encoder(3, 2, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "rightDriveEncoder", driveTrainrightDriveEncoder);
        driveTrainrightDriveEncoder.setDistancePerPulse(1.0);
        driveTrainrightDriveEncoder.setPIDSourceType(PIDSourceType.kRate);
        elevatorTalonSRX1 = new WPI_TalonSRX(1);
        
        
        elevatorENCODER_IS_WIRED_TO_TALON_NEED_TO_MANUALLY_WRITE_CODE = new Encoder(4, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("Elevator", "ENCODER_IS_WIRED_TO_TALON_NEED_TO_MANUALLY_WRITE_CODE", elevatorENCODER_IS_WIRED_TO_TALON_NEED_TO_MANUALLY_WRITE_CODE);
        elevatorENCODER_IS_WIRED_TO_TALON_NEED_TO_MANUALLY_WRITE_CODE.setDistancePerPulse(1.0);
        elevatorENCODER_IS_WIRED_TO_TALON_NEED_TO_MANUALLY_WRITE_CODE.setPIDSourceType(PIDSourceType.kRate);
        elevatorelevatorLimitHighDIO = new DigitalInput(5);
        LiveWindow.addSensor("Elevator", "elevatorLimitHighDIO", elevatorelevatorLimitHighDIO);
        
        elevatorelevatorLimitLowDIO = new DigitalInput(6);
        LiveWindow.addSensor("Elevator", "elevatorLimitLowDIO ", elevatorelevatorLimitLowDIO);
        
        intakeIntakeSolenoid = new DoubleSolenoid(0, 4, 5);
        LiveWindow.addActuator("Intake", "IntakeSolenoid", intakeIntakeSolenoid);
        
        intakeintakeLeftPWM = new Talon(0);
        LiveWindow.addActuator("Intake", "intakeLeftPWM ", (Talon) intakeintakeLeftPWM);
        intakeintakeLeftPWM.setInverted(false);
        intakeintakeRightPWM = new Talon(1);
        LiveWindow.addActuator("Intake", "intakeRightPWM ", (Talon) intakeintakeRightPWM);
        intakeintakeRightPWM.setInverted(false);
        intakeRoller = new Spark(6);
        LiveWindow.addActuator("Intake", "Roller", (Spark) intakeRoller);
        intakeRoller.setInverted(false);
        intakeGripper = new Solenoid(0, 6);
        LiveWindow.addActuator("Intake", "Gripper", intakeGripper);
        
        catapultleftSolenoid = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Catapult", "leftSolenoid", catapultleftSolenoid);
        
        catapultrightSolenoid = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("Catapult", "rightSolenoid", catapultrightSolenoid);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
