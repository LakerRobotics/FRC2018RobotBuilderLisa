// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5053.RobotBuilderLisa.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;
import org.usfirst.frc5053.RobotBuilderLisa.subsystems.*;

/**
 *
 */
public class DriveTestTreePattern extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public DriveTestTreePattern() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
    	double speed = 1.5;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
        addSequential(new DriveZeroDriveDistenceEncoders());
        addSequential(new DriveStraightAtAngle(36, 0, 0));
        addSequential(new DriveTurnArc(74, 1, -24));
        addSequential(new DriveTurnArc(76, 1, 24));
        addSequential(new DriveStraightAtAngle(24, 1, 90));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

        addSequential(new DriveZeroDriveDistenceEncoders());
        addSequential(new DriveZeroGyro());
        addSequential(new DriveStraightAtAngle(48        , speed,   0)); // Distance, speed, at Field Angle
        addSequential(new DriveTurnArc        (36+38     , speed, -24)); // Distance, speed, Radius
        addSequential(new DriveTurnArc        (36+38+38*2, speed,  24)); // Distance, speed, Radius 
        addSequential(new DriveStraightAtAngle(24        , speed,  90)); // Distance, speed, at Field Angle
        addSequential(new DriveTurnArc        (24+38*2   , speed,  24)); // Distance, speed, Radius
        addSequential(new DriveTurnArc        (24+38*2+38, speed, -24)); // Distance, speed, Radius
        addSequential(new DriveStraightAtAngle(48        , speed, 180)); // Distance, speed, at Field Angle
        
        /* (Note: currently DriveStraightAtAngle resets the distance, while DriveTurnArc does not, for simplicity 
         * we will probably make so the distance is reset per segment(DriveTurnArc included). This will introduce
         * a little error in the final location of the robot but it is probably an easier start point. )
         */
    } 
}
